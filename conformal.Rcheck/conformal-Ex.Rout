
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "conformal"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "conformal-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('conformal')
Loading required package: caret
Loading required package: lattice
Loading required package: ggplot2
Loading required package: grid
Loading required package: randomForest
randomForest 4.6-10
Type rfNews() to see new features/changes/bug fixes.
Loading required package: e1071
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ConformalClassification")
> ### * ConformalClassification
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ConformalClassification
> ### Title: Class Conformal Prediction for Classification
> ### Aliases: ConformalClassification
> 
> ### ** Examples
> 
> showClass("ConformalClassification")
Class "ConformalClassification" [package "conformal"]

Slots:
                  
Name:       .xData
Class: environment

Extends: 
Class "envRefClass", directly
Class ".environment", by class "envRefClass", distance 2
Class "refClass", by class "envRefClass", distance 2
Class "environment", by class "envRefClass", distance 3, with explicit coerce
Class "refObject", by class "envRefClass", distance 3
> 
> # Optional for parallel training
> #library(doMC)
> #registerDoMC(cores=4)
> 
> data(LogS)
> 
> # convert data to categorical
> LogSTrain[LogSTrain > -4] <- 1
> LogSTrain[LogSTrain <= -4] <- 2
> LogSTest[LogSTest > -4] <- 1
> LogSTest[LogSTest <= -4] <- 2
> 
> LogSTrain <- factor(LogSTrain)
> LogSTest <- factor(LogSTest)
> 
> # Remove part of the data to allow for quick training
> LogSTrain <- LogSTrain[1:20]
> LogSTest <- LogSTest[1:20]
> LogSDescsTrain <- LogSDescsTrain[1:20,]
> LogSDescsTest <- LogSDescsTest[1:20,]
> 
> algorithm <- "rf"
> 
> trControl <- trainControl(method = "cv",  number=5,savePredictions=TRUE)
> set.seed(3)
> 
> #number of trees
> nb_trees <- 100
> model <- train(LogSDescsTrain, LogSTrain, 
+          algorithm,type="classification", 
+          trControl=trControl,predict.all=TRUE,
+          keep.forest=TRUE,norm.votes=TRUE,
+          ntree=nb_trees)
Warning in eval(expr, envir, enclos) :
  model fit failed for Fold1: mtry=  2 Error in randomForest.default(x, y, mtry = param$mtry, ...) : 
  Need at least two classes to do classification.

Warning in eval(expr, envir, enclos) :
  model fit failed for Fold1: mtry=106 Error in randomForest.default(x, y, mtry = param$mtry, ...) : 
  Need at least two classes to do classification.

Warning in eval(expr, envir, enclos) :
  model fit failed for Fold1: mtry=211 Error in randomForest.default(x, y, mtry = param$mtry, ...) : 
  Need at least two classes to do classification.

Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo,  :
  There were missing values in resampled performance measures.
> 
> 
> # Instantiate the class and get the p.values
> example <- ConformalClassification$new()
Conformal Prediction Class for Classification Instantiated
> example$CalculateCVScores(model=model)
[1] "Calculating the vector of nonconformity measures for the CV predictions (label wise Mondrian ICP).."

> example$CalculatePValues(new.data=LogSDescsTest)
[1] "Classifying the input data.."

> # we get the p.values:
> example$p.values$P.values
                1         2
427.1  0.00000000 1.0000000
598.1  0.36842105 0.0000000
919.1  0.31578947 0.6842105
1456.1 0.31578947 0.6842105
324.1  0.31578947 0.6842105
1439.1 0.31578947 0.6842105
1512.1 0.36842105 0.6315789
1057.1 0.31578947 0.6842105
1006.1 0.31578947 0.6842105
99.1   0.36842105 0.0000000
329.1  0.31578947 0.6842105
282.1  0.36842105 0.6315789
1096.1 0.31578947 0.6842105
612.1  0.36842105 0.0000000
1226.1 0.31578947 0.6842105
792.1  0.00000000 1.0000000
1142.1 0.05263158 0.9473684
1577.1 0.00000000 1.0000000
604.1  0.36842105 0.0000000
1234.1 0.31578947 0.6842105
> # we get the significance of these p.values.
> example$p.values$Significance_p.values
       1 2
427.1  0 1
598.1  1 0
919.1  1 1
1456.1 1 1
324.1  1 1
1439.1 1 1
1512.1 1 1
1057.1 1 1
1006.1 1 1
99.1   1 0
329.1  1 1
282.1  1 1
1096.1 1 1
612.1  1 0
1226.1 1 1
792.1  0 1
1142.1 0 1
1577.1 0 1
604.1  1 0
1234.1 1 1
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ConformalClassification", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ConformalRegression")
> ### * ConformalRegression
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ConformalRegression
> ### Title: Class ConformalRegression: Conformal Prediction for Regression
> ### Aliases: ConformalRegression
> 
> ### ** Examples
> 
> 
> showClass("ConformalRegression")
Class "ConformalRegression" [package "conformal"]

Slots:
                  
Name:       .xData
Class: environment

Extends: 
Class "envRefClass", directly
Class ".environment", by class "envRefClass", distance 2
Class "refClass", by class "envRefClass", distance 2
Class "environment", by class "envRefClass", distance 3, with explicit coerce
Class "refObject", by class "envRefClass", distance 3
> #############################################
> ### Example
> #############################################
> 
> # Optional for parallel training
> #library(doMC)
> #registerDoMC(cores=4)
> 
> data(LogS)
> 
> # Remove part of the data to allow for quick training
> LogSTrain <- LogSTrain[1:20]
> LogSTest <- LogSTest[1:20]
> LogSDescsTrain <- LogSDescsTrain[1:20,]
> LogSDescsTest <- LogSDescsTest[1:20,]
> 
> algorithm <- "svmRadial"
> tune.grid <- expand.grid(.sigma = expGrid(power.from=-10, power.to=-6, power.by=2, base=2), 
+                          .C = c(1,10,100))
> trControl <- trainControl(method = "cv",  number=5,savePredictions=TRUE)
> set.seed(1)
> model <- train(LogSDescsTrain, LogSTrain, algorithm, 
+                tuneGrid=tune.grid, 
+                trControl=trControl)
Loading required package: kernlab
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
> 
> 
> # Train an error model
> error_model <- ErrorModel(PointPredictionModel=model,x.train=LogSDescsTrain,
+                           savePredictions=TRUE,algorithm=algorithm,
+                           trControl=trControl, 
+                           tune.grid=tune.grid)
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
Warning in .local(x, ...) : Variable(s) `' constant. Cannot scale data.
> 
> # Instantiate the class and get the confidence intervals
> example <- ConformalRegression$new()
Conformal Prediction Class for Regression Instantiated
> example$CalculateAlphas(model=model,error_model=error_model,ConformityMeasure=StandardMeasure)
[1] "Calculating alphas.."

> example$GetConfidenceIntervals(new.data=LogSDescsTest)
[1] "Predicting (i) the value, and (ii) the error for the new data.."

> example$CorrelationPlot(obs=LogSTest)
[1] "This method generates a correlation plot for the observed against the predicted values for a set of datapoints, e.g. a test set."
> example$plot
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ConformalRegression", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:kernlab'

> nameEx("LogS")
> ### * LogS
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: LogS
> ### Title: Small Molecule Solubility (LogS) Data
> ### Aliases: LogS
> 
> ### ** Examples
> 
> # To use the data
> data(LogS)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("LogS", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("expGrid")
> ### * expGrid
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: expGrid
> ### Title: Exponential Grid Definition
> ### Aliases: expGrid
> 
> ### ** Examples
> 
> expGrid(power.from=-10,power.to=10,power.by=2,base=10)
 [1] 1e-10 1e-08 1e-06 1e-04 1e-02 1e+00 1e+02 1e+04 1e+06 1e+08 1e+10
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("expGrid", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.909 0.136 7.069 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
