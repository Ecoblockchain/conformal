
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "conformal"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('conformal')
Loading required package: caret
Warning: package 'caret' was built under R version 3.0.2
Loading required package: lattice
Warning: package 'lattice' was built under R version 3.0.2
Loading required package: ggplot2
Loading required package: grid
Conformal prediction in R. Isidro Cortes-Ciriano <isidrolauscher@gmail.com>
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ConformalReg")
> ### * ConformalReg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ConformalReg
> ### Title: Conformal Prediction for Regression
> ### Aliases: ConformalReg
> ### Keywords: ~ConformalRegression
> 
> ### ** Examples
> 
> #############################################
> ### Example
> #############################################
> 
> # Optional for parallel training
> #library(doMC)
> #registerDoMC(cores=4)
> 
> data(LogS)
> 
> algorithm <- "svmRadial"
> tune.grid <- expand.grid(.sigma = expGrid(power.from=-10, power.to=-6, power.by=1, base=2), 
+                          .C = expGrid(power.from=4, power.to=10, power.by=2, base=2))
> trControl <- trainControl(method = "cv",  number=5,savePredictions=TRUE)
> set.seed(3)
> model <- train(LogSDescsTrain, LogSTrain, algorithm, 
+                tuneGrid=tune.grid, 
+                trControl=trControl)
Loading required package: kernlab
Warning: package 'kernlab' was built under R version 3.0.2
> 
> 
> # Train an error model
> ErrorModel <- error_model(PointPredictionModel=model,x.train=,LogSDescsTrain,
+                           savePredictions=TRUE,algorithm=algorithm,
+                           trControl=trControl, tune.grid=tune.grid)
> 
> # Instantiate the class and get the confidence intervals
> example <- ConformalReg$new()
Conformal Prediction Class for Regression Instantiated
> example$CalculateAlphas(model=model,error_model=ErrorModel,ConformityMeasure=StandardMeasure)
[1] "Calculating alphas.."

> example$GetConfidenceIntervals(new.data=LogSDescsTest)
[1] "Predicting (i) the value, and (ii) the error for the new data.."

> example$CorrelationPlot(obs=LogSTest)
[1] "This method generates a correlation plot for the observed against the predicted values for a set of datapoints, e.g. a test set."
> example$plot
> 
> 
> 
> 
> 
> 
> cleanEx()

detaching 'package:kernlab'

> nameEx("LogS")
> ### * LogS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LogS
> ### Title: Small Molecule Solubility (LogS) Data
> ### Aliases: LogS
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(LogS)
> ## maybe str(LogS) ; plot(LogS) ...
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  99.439 3.91 103.329 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
